{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CropGBM\uff01 Crop Genomic Breeding machine (CropGBM) is a multifunctional program that integrates data preprocessing, population structure analysis, SNP selection, phenotype prediction, and data visualization. Has the following advantages: Use LightGBM algorithm to quickly and accurately predict phenotype values and support GPU-accelerated training. Supports selection and visualization of SNPs that are strongly related to phenotype. Support PCA and t-SNE two dimensionality reduction algorithms to extract SNP information. Support Kmeans and OPTICS two clustering algorithms to analyze the sample population structure. Plot histograms of heterozygosity rate, deletion rate, and frequency of alleles for genotype data. Chinese version documentation: https://ibreeding-ch.github.io Download link: https://github.com/YuetongXU/CropGBM Cite: Contact us: cropgbm@163.com Note: Academic users can download directly, industrial users first contact us.","title":"Home"},{"location":"#welcome-to-cropgbm","text":"Crop Genomic Breeding machine (CropGBM) is a multifunctional program that integrates data preprocessing, population structure analysis, SNP selection, phenotype prediction, and data visualization. Has the following advantages: Use LightGBM algorithm to quickly and accurately predict phenotype values and support GPU-accelerated training. Supports selection and visualization of SNPs that are strongly related to phenotype. Support PCA and t-SNE two dimensionality reduction algorithms to extract SNP information. Support Kmeans and OPTICS two clustering algorithms to analyze the sample population structure. Plot histograms of heterozygosity rate, deletion rate, and frequency of alleles for genotype data. Chinese version documentation: https://ibreeding-ch.github.io Download link: https://github.com/YuetongXU/CropGBM Cite: Contact us: cropgbm@163.com Note: Academic users can download directly, industrial users first contact us.","title":"Welcome to CropGBM\uff01"},{"location":"Feature/","text":"Features This section details the characteristics of the methods used by CropGBM in data processing, and briefly introduces the principles of these methods. Use LightGBM algorithm to predict phenotypic values and select SNPs At present, methods such as GBLUP are commonly used to predict phenotype values. Calculate the correlation matrix between samples from the entire genome marker or genotype, and then use the mixed linear model (MLM) to calculate the estimated breeding value (EBV) of the samples. But GBLUP also has many shortcomings: Difficult to capture complex non-linear relationships between genotypes. When faced with complex population structure prediction problems, its cross-population prediction ability is not ideal. The kinship matrix is not extensible. If the training population changes, the kinship matrix needs to be recalculated. At the same time, the computation time of the kinship matrix increases dramatically with the increase of the sample size of the training population. Unable to solve the multi-classification problem. Many genotype-to-phenotype prediction tasks require classification prediction. With the development of genotype detection, phenotype detection and other technologies, the cost of sample acquisition has continued to decline. The genotype and phenotype data have accumulated rapidly. The sample size has grown from hundreds to thousands. As GBLUP and other methods need to calculate the correlation matrix between samples, its computing performance decreases significantly with the increase of the population size. CropGBM uses the LightGBM algorithm, which is a large number of optimized Gradient Boosting Decision Tree (GBDT) algorithms, as the kernel of phenotype prediction. When processing large batches of sample data, compared to GBLUP, the lightgbm algorithm can be used without losing accuracy: Dramatically reduce memory consumption. Significantly improve prediction speed and support GPU-accelerated model training. Support discontinuous phenotype value prediction CropGBM can also mine phenotype-related SNP sites according to the weight of SNP in the model. Generally, the larger the weight of SNP, the stronger the correlation with phenotype. It is recommended that users compare the weights of each SNP provided by CropGBM with the GWAS results to eliminate false positive results in their respective methods and improve their reliability. Introducing t-SNE method to reduce dimensionality of genotype data The t-distributed stochastic neighbor embedding (t-SNE) algorithm is a nonlinear dimensionality reduction algorithm for mining high-dimensional data. The data points are mapped from high-dimensional to low-dimensional in the form of conditional probability, and t-distribution is used to cleverly solve the congestion caused by dimensionality reduction of high-dimensional data, so that the dimensionality reduction results retain the local and global structure of the data. Linear dimensionality reduction algorithms such as PCA cannot ensure that the data structure of non-linear high-dimensional data can be mapped correctly after dimensionality reduction. On the other hand, when the data is reduced to two dimensions, the t-SNE algorithm re-arranges the data on a two-dimensional plane, while the PCA algorithm selects the two dimensions from the high-dimensional space that can best show the difference in data to display the data. Therefore, the t-SNE algorithm is better at displaying dimensionality reduction data. Because t-SNE algorithm has quadratic time and space complexity, it requires higher system resources. Before using the t-SNE algorithm to reduce the dimensionality of the program, the program first reduced the dimensionality of the SNP data through a sliding window. The SNP data is divided into multiple groups according to the sliding window size set by the user. The sliding window size is the number of SNP. The sum of the SNP values in each group is used as the value of the feature in the new dimension to achieve the purpose of reducing system resource consumption and increasing SNP feature value richness. Introducing OPTICS method to cluster data The ordering points to identify the clustering structure (OPTICS) algorithm is a density-based clustering algorithm. Finding high-density regions separated by low-density regions in the data set and dividing the separated high-density regions into clusters, it can find any shape of the group structure. However, the K-Means algorithm and hierarchical clustering algorithm commonly used in the current research are distance-based clustering algorithms. They perform well on spherical data sets. But when the data set is non-spherical structure, the clustering effect of the above algorithm is not good. On the other hand, K-Means algorithm requires users to provide the number of clusters in advance. But sometimes researchers may not know the population structure of the sample set. The OPTICS algorithm can automatically determine the number of clusters based on the dense distribution of data in the sample set, helping users to discover the population structure and sort out the relationships between samples. Plot the distribution histogram of parameters of the genotype data The pre-processing module of the program supports statistics on the sample heterozygosity rate, genotype heterozygosity rate, minor allele frequency, genotype deletion rate, and sample deletion rate of the input genotype data and outputs it as a histogram. It is convenient for users to understand the overall situation of the data and formulate subsequent research methods.","title":"Feature"},{"location":"Feature/#features","text":"This section details the characteristics of the methods used by CropGBM in data processing, and briefly introduces the principles of these methods.","title":"Features"},{"location":"Feature/#use-lightgbm-algorithm-to-predict-phenotypic-values-and-select-snps","text":"At present, methods such as GBLUP are commonly used to predict phenotype values. Calculate the correlation matrix between samples from the entire genome marker or genotype, and then use the mixed linear model (MLM) to calculate the estimated breeding value (EBV) of the samples. But GBLUP also has many shortcomings: Difficult to capture complex non-linear relationships between genotypes. When faced with complex population structure prediction problems, its cross-population prediction ability is not ideal. The kinship matrix is not extensible. If the training population changes, the kinship matrix needs to be recalculated. At the same time, the computation time of the kinship matrix increases dramatically with the increase of the sample size of the training population. Unable to solve the multi-classification problem. Many genotype-to-phenotype prediction tasks require classification prediction. With the development of genotype detection, phenotype detection and other technologies, the cost of sample acquisition has continued to decline. The genotype and phenotype data have accumulated rapidly. The sample size has grown from hundreds to thousands. As GBLUP and other methods need to calculate the correlation matrix between samples, its computing performance decreases significantly with the increase of the population size. CropGBM uses the LightGBM algorithm, which is a large number of optimized Gradient Boosting Decision Tree (GBDT) algorithms, as the kernel of phenotype prediction. When processing large batches of sample data, compared to GBLUP, the lightgbm algorithm can be used without losing accuracy: Dramatically reduce memory consumption. Significantly improve prediction speed and support GPU-accelerated model training. Support discontinuous phenotype value prediction CropGBM can also mine phenotype-related SNP sites according to the weight of SNP in the model. Generally, the larger the weight of SNP, the stronger the correlation with phenotype. It is recommended that users compare the weights of each SNP provided by CropGBM with the GWAS results to eliminate false positive results in their respective methods and improve their reliability.","title":"Use LightGBM algorithm to predict phenotypic values and select SNPs"},{"location":"Feature/#introducing-t-sne-method-to-reduce-dimensionality-of-genotype-data","text":"The t-distributed stochastic neighbor embedding (t-SNE) algorithm is a nonlinear dimensionality reduction algorithm for mining high-dimensional data. The data points are mapped from high-dimensional to low-dimensional in the form of conditional probability, and t-distribution is used to cleverly solve the congestion caused by dimensionality reduction of high-dimensional data, so that the dimensionality reduction results retain the local and global structure of the data. Linear dimensionality reduction algorithms such as PCA cannot ensure that the data structure of non-linear high-dimensional data can be mapped correctly after dimensionality reduction. On the other hand, when the data is reduced to two dimensions, the t-SNE algorithm re-arranges the data on a two-dimensional plane, while the PCA algorithm selects the two dimensions from the high-dimensional space that can best show the difference in data to display the data. Therefore, the t-SNE algorithm is better at displaying dimensionality reduction data. Because t-SNE algorithm has quadratic time and space complexity, it requires higher system resources. Before using the t-SNE algorithm to reduce the dimensionality of the program, the program first reduced the dimensionality of the SNP data through a sliding window. The SNP data is divided into multiple groups according to the sliding window size set by the user. The sliding window size is the number of SNP. The sum of the SNP values in each group is used as the value of the feature in the new dimension to achieve the purpose of reducing system resource consumption and increasing SNP feature value richness.","title":"Introducing t-SNE method to reduce dimensionality of genotype data"},{"location":"Feature/#introducing-optics-method-to-cluster-data","text":"The ordering points to identify the clustering structure (OPTICS) algorithm is a density-based clustering algorithm. Finding high-density regions separated by low-density regions in the data set and dividing the separated high-density regions into clusters, it can find any shape of the group structure. However, the K-Means algorithm and hierarchical clustering algorithm commonly used in the current research are distance-based clustering algorithms. They perform well on spherical data sets. But when the data set is non-spherical structure, the clustering effect of the above algorithm is not good. On the other hand, K-Means algorithm requires users to provide the number of clusters in advance. But sometimes researchers may not know the population structure of the sample set. The OPTICS algorithm can automatically determine the number of clusters based on the dense distribution of data in the sample set, helping users to discover the population structure and sort out the relationships between samples.","title":"Introducing OPTICS method to cluster data"},{"location":"Feature/#plot-the-distribution-histogram-of-parameters-of-the-genotype-data","text":"The pre-processing module of the program supports statistics on the sample heterozygosity rate, genotype heterozygosity rate, minor allele frequency, genotype deletion rate, and sample deletion rate of the input genotype data and outputs it as a histogram. It is convenient for users to understand the overall situation of the data and formulate subsequent research methods.","title":"Plot the distribution histogram of parameters of the genotype data"},{"location":"Parameters/","text":"Parameters In this section, the parameters of each module are divided into four types: Boolean, necessary, semi-necessary, and optional. Boolean parameters are divided into assigned and unassigned. When assigning, the program will execute the function corresponding to the parameter; otherwise, the program will not execute the corresponding function. If the necessary parameter is not assigned a value, an error will be reported when the module it belongs to is called. If the semi-necessary parameter is not assigned a value, an error will be reported when calling a specific function under the module. If optional parameters are not assigned, certain functions cannot be used, but no error will be reported. Except for DEFAULT module parameters, other parameters are only used when the owning module is called. DEFAULT module The following parameters will be used in each module: -c , --config_path : The path of the configuration file. The file indicates the value of each parameter that the program needs to call. When the parameters in the file overlap with the command line, the program will use the command line value as the standard. -o , --output-folder : The output path of the program result. Default is the current working path. Genotype data preprocessing module Boolean -pg , --preprocessed-geno : Call genotype data preprocessing module, optional values [all, filter]. The 'all' indicates that the program will call the complete pre-processing module, including: statistical and visual data basics, screening out non-compliant sample individuals and SNP sites based on the deletion rate, MAF, and filling the missing data of SNP based on high-frequency genotypes, removing redundant SNP according to r ^ 2, extracting specific genotype data function of specific sample according to SNPID or sampleID. The 'filter' indicates that the program will call part of the preprocessing module, which only includes the specific extraction of specific samples according to SNPID or sampleID --recode : Recode the genotype data file, transform the encoding method from base encoding to additive encoding. necessary --fileprefix : Genotype data filename prefix. --fileformat : Genotype data file format, optional values [ped, bed, vcf, bcf]. optional --remove-sampleid-path : The file path of the sampleID to be deleted. The format is two columns with spaces or tabs as separators. The first column is familyID and the second column is within-familyID. The program will delete the corresponding sample data in the genotype file according to sampleID. --keep-sampleid-path : The file path of the sampleID to be extracted. The file format is the same as --remove-sampleid-path . --extract-snpid-path : The file path of the SNPID to be extracted, the format is a list of SNPID. The program will extract the corresponding SNP data from the genotype file based on the SNPID. --exclude-snpid-path : The file path of the SNPID to be deleted. The file format is the same as --extract-snpid-path . --snpmaxmiss : The maximum miss rate of SNP. Screen out SNP with missing rate exceeding threshold. Default is 0.05 --samplemaxmiss : Maximum sample miss rate. Screen out samples whose missing rate exceeds the threshold. Default is 0.05 --maf-max : The minimum allele frequency. SNP with minimum allele frequency less than the threshold was screened out. Default is 0.01 --r2-cutoff : Equivalent to the --indep-pairwise parameter in PLINK. Default is 0.8 Phenotyp data preprocessing module Boolean -pp , --preprocessed-phe : Call the phenotype data preprocessing module. --phe-norm : Call the phenotype data normalization function. --phe-plot : Call phenotype data visualization function. --phefile-header : The phenotype data file contains the header. --ppgroupfile-header : The groupID data file contains the header. necessary --phefile-path : The phenotype data file path. semi-necessary --ppexsampleid-path : The file path of the sampleID to be extracted. The file content is only a list of sampleID. --ppgroupfile-path : GroupID data file path. --ppgroupfile-sep : GroupID data file separator. Default is ',' --ppgroupid-column : The column index that stores the groupID. This parameter is only used when the number of ppgroupfile columns is greater than 2. Default is 2 --num2wordfile-path : The file path of transformation table of integer and phenotype. This parameter is only used when --phe-recode=num2word . optional --phefile-sep : phenotype data file separator. Default is ',' --phe-column : The column index in the phenotype data file that stores phenotype. This parameter is only called when the number of columns in the phenotype file is greater than 2. Default is 2 --phe-recode : Call the phenotype data recoding function, optional values [word2num, num2word]. The 'word2num' means re-encoding the phenotype data into continuous non-negative integer form. The 'num2word' means re-encoding the continuous non-negative integer form into phenotype data (need to provide a conversion table corresponding to integer and phenotype). When performing classification tasks, Lightgbm only accepts consecutive integers with example labels [0, N). If the training sample comes from 5 groups, [0, 1, 2, 3, 4] is required as the label of the 5 groups, but this usually does not match the actual groupID. Using this parameter, the program can implement a reversible conversion between sample labels and [0, N) consecutive integers. Provide compatible phenotype data for downstream classification tasks. --norm-mode : Normalization algorithm, optional values [0-1, max-min, z-score]. Default is z-score Population structure analysis module Boolean -s , --structure : Call the population structure analysis module. --structure-plot : Call the population structure plot function. A total of 2 or 3 scatter plots are displayed to show the results of dimensionality reduction and clustering. --sgroupfile-header : The groupID data file contains the header. necessary --genofile-path : The path of the genotype data file. The pre-processed results are often used as input. semi-necessary --n-clusters : the number of clusters. This parameter is only used when --cluster-mode = kmeans . --sgroupfile-path : GroupID data file path. --sgroupfile-sep : GroupID data file separator. Default is ',' --sgroupfile-column : The column index that stores groupID. This parameter is only used when the number of --sgroupfile-path file columns is greater than 2. optional --redim-mode : Dimension reduction algorithm, optional value [tsne, pca]. Default is pca --pca-explained-var : The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the dimension of the data after pca dimensionality reduction; when the parameter value is a decimal, it indicates the amount of variation that can be explained by the data after pca dimensionality reduction. Default is 0.95. This parameter is only used when --redim-mode = pca --window-size : Sliding window size in dimensionality reduction. Because the calculation speed of the t-SNE dimensionality reduction algorithm decreases significantly with increasing dimensions, the program performs a preliminary dimensionality reduction on the data by sliding windows. Default is 20. This parameter is only used when --redim-mode = tsne . --tsne-dim : The dimension of the t-SNE algorithm after dimensionality reduction. Default is 2. This parameter is only used when --redim-mode = tsne . --cluster-mode : Dimension reduction algorithm, optional value [tsne, pca]. Default is Kmeans. --optics-min-samples : The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the minimum number of samples required to form the core point; when the parameter value is a decimal number, it indicates the ratio of the minimum number of samples required to form the core point to the total sample number. This parameter is only used when --cluster-mode = optics . Default is 0.025 --optics-xi : The minimum value of the reachable distance gradient required for the aggregation class. This parameter is only used when --cluster-mode = optics . Default is 0.05 --optics-min-cluster-size : The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the minimum number of samples required for the aggregation. When the parameter value is a decimal number, it indicates the minimum number of samples required for the aggregation. This parameter is only used when --cluster-mode = optics . Default is 0.03 Training model, SNP selection and phenotype prediction module Boolean -e , --engine : Call the training model, SNP selection and phenotype prediction module. -t , --train : Call the training model function. -cv : Call the cross-validation function. -p , --predict : Call the phenotype prediction function. -sf , --select-feature : Call SNP selection function. --bygain-boxplot : Draws a boxplot that keeps changing as the SNP is added to the model. This parameter is used when -sf is specified. semi-necessary --traingeno : The path to the genotype data file for the training set. The file separator is ',', the first line is SNPID, and the first column is sampleID. This parameter is used when -t or -cv is specified. --trainphe : The path to the phenotype data file for the training set. The file separator is ',', including the header, and the first column is sampleID information. This parameter is used when -t or -cv is specified. --testgeno : The path to the genotype data file for the test set. File format is the same as --traingeno . This parameter is used when -p is specified. --modelfile-path : The path of the LightGBM model file. The program uses this model to complete the phenotype prediction of the test set. This parameter is used when -p is specified. optional --validgeno : The path to the genotype data file for the validation set. File format is the same as --traingeno . This parameter is used when -t is specified. --trainphe : Path to the sampleID file of the validation set sample. File format is the same as --traingeno . This parameter is used when -t is specified. --init-model-path : The path of the initial model file. The LightGBM algorithm will continue to train on this model. Commonly used for batch training of big data. This parameter is used when -t or -cv is specified. --min-detal : The minimum percentage of model accuracy improvement per training. The program returns the number of times the model is trained when the accuracy is less than this threshold and the accuracy of the cross-validation of the model. When objective=regression , the accuracy is the mean of the mse between the predicted result and the true value. This parameter is used when -cv is specified. Default is 0.5 --cv-times : Number of repetitions for cross-validation. This parameter is used when -sf is specified. Default is 5 --cv-nfold : The number of folds per cross-validation. This parameter is used when -cv is specified. Default is 5 --gain-min : calculate the total gain of each SNP in the model, and use the product of the maximum gain and --gain-min as the threshold. When the total gain of the SNP in the model is less than the threshold, this SNP will not be selected. This parameter is used when -sf and --bygain-boxplot are specified. Default is 0.05 --colorbar-max : The product of the maximum gain of each SNP in each tree and --colorbar-max will be used as the maximum value of colorbar in the heat map. This parameter is used when -sf is specified. Default is 0.6 LightGBM parameters --learning-rate : The learning rate of the model. Default is 0.1 --num-leaves : The maximum number of leaves per decision tree. Default is 10 --num-threads : The number of CPU threads available for core module operation calls. Default is 0, which is the default number of threads in OpenMP. --min-data-in-leaf : The minimum number of samples in each leaf. Default is 1 --objective : The type of purpose for model training. Default is 'regression' --device-type : The device type called by training model, optional value ['cpu', 'gpu']. Default is 'cpu' --max-depth : The maximum depth of the decision tree. If the value is <= 0, there is no maximum depth limit. Default is -1 --feature-fraction : The proportion of features used in training the model to the total number of features. Default is 1 --verbosity : Controls the complexity of information output during model training. <0: Fatal, = 0: Error (Warning), = 1: Info,> 1: Debug. Default is 0 --num-class : The number of classes in the training set. This parameter is only called for multi-class tasks, that is, --objective: multiclass . Default is 1 --num-boost-round : The number of training (iterations) of the model. Default is 100 --early-stopping-rounds : This parameter should not be called only if -cv or -t has a validation set. After every N rounds of training (N is the value of the user-defined parameter), the program will calculate the prediction accuracy of the model on the validation set. If the prediction accuracy no longer improves, the model will stop training immediately. This parameter can be used to prevent model training from overfitting. Default is 20 --verbose-eval : This parameter should not be called only when -cv or -t has a validation set. After each N rounds of training (N is the value of the user-defined parameter), the program will calculate the prediction accuracy of the model on the validation set and output it. Default is 10","title":"Parameters"},{"location":"Parameters/#parameters","text":"In this section, the parameters of each module are divided into four types: Boolean, necessary, semi-necessary, and optional. Boolean parameters are divided into assigned and unassigned. When assigning, the program will execute the function corresponding to the parameter; otherwise, the program will not execute the corresponding function. If the necessary parameter is not assigned a value, an error will be reported when the module it belongs to is called. If the semi-necessary parameter is not assigned a value, an error will be reported when calling a specific function under the module. If optional parameters are not assigned, certain functions cannot be used, but no error will be reported. Except for DEFAULT module parameters, other parameters are only used when the owning module is called.","title":"Parameters"},{"location":"Parameters/#default-module","text":"The following parameters will be used in each module: -c , --config_path : The path of the configuration file. The file indicates the value of each parameter that the program needs to call. When the parameters in the file overlap with the command line, the program will use the command line value as the standard. -o , --output-folder : The output path of the program result. Default is the current working path.","title":"DEFAULT module"},{"location":"Parameters/#genotype-data-preprocessing-module","text":"Boolean -pg , --preprocessed-geno : Call genotype data preprocessing module, optional values [all, filter]. The 'all' indicates that the program will call the complete pre-processing module, including: statistical and visual data basics, screening out non-compliant sample individuals and SNP sites based on the deletion rate, MAF, and filling the missing data of SNP based on high-frequency genotypes, removing redundant SNP according to r ^ 2, extracting specific genotype data function of specific sample according to SNPID or sampleID. The 'filter' indicates that the program will call part of the preprocessing module, which only includes the specific extraction of specific samples according to SNPID or sampleID --recode : Recode the genotype data file, transform the encoding method from base encoding to additive encoding. necessary --fileprefix : Genotype data filename prefix. --fileformat : Genotype data file format, optional values [ped, bed, vcf, bcf]. optional --remove-sampleid-path : The file path of the sampleID to be deleted. The format is two columns with spaces or tabs as separators. The first column is familyID and the second column is within-familyID. The program will delete the corresponding sample data in the genotype file according to sampleID. --keep-sampleid-path : The file path of the sampleID to be extracted. The file format is the same as --remove-sampleid-path . --extract-snpid-path : The file path of the SNPID to be extracted, the format is a list of SNPID. The program will extract the corresponding SNP data from the genotype file based on the SNPID. --exclude-snpid-path : The file path of the SNPID to be deleted. The file format is the same as --extract-snpid-path . --snpmaxmiss : The maximum miss rate of SNP. Screen out SNP with missing rate exceeding threshold. Default is 0.05 --samplemaxmiss : Maximum sample miss rate. Screen out samples whose missing rate exceeds the threshold. Default is 0.05 --maf-max : The minimum allele frequency. SNP with minimum allele frequency less than the threshold was screened out. Default is 0.01 --r2-cutoff : Equivalent to the --indep-pairwise parameter in PLINK. Default is 0.8","title":"Genotype data preprocessing module"},{"location":"Parameters/#phenotyp-data-preprocessing-module","text":"Boolean -pp , --preprocessed-phe : Call the phenotype data preprocessing module. --phe-norm : Call the phenotype data normalization function. --phe-plot : Call phenotype data visualization function. --phefile-header : The phenotype data file contains the header. --ppgroupfile-header : The groupID data file contains the header. necessary --phefile-path : The phenotype data file path. semi-necessary --ppexsampleid-path : The file path of the sampleID to be extracted. The file content is only a list of sampleID. --ppgroupfile-path : GroupID data file path. --ppgroupfile-sep : GroupID data file separator. Default is ',' --ppgroupid-column : The column index that stores the groupID. This parameter is only used when the number of ppgroupfile columns is greater than 2. Default is 2 --num2wordfile-path : The file path of transformation table of integer and phenotype. This parameter is only used when --phe-recode=num2word . optional --phefile-sep : phenotype data file separator. Default is ',' --phe-column : The column index in the phenotype data file that stores phenotype. This parameter is only called when the number of columns in the phenotype file is greater than 2. Default is 2 --phe-recode : Call the phenotype data recoding function, optional values [word2num, num2word]. The 'word2num' means re-encoding the phenotype data into continuous non-negative integer form. The 'num2word' means re-encoding the continuous non-negative integer form into phenotype data (need to provide a conversion table corresponding to integer and phenotype). When performing classification tasks, Lightgbm only accepts consecutive integers with example labels [0, N). If the training sample comes from 5 groups, [0, 1, 2, 3, 4] is required as the label of the 5 groups, but this usually does not match the actual groupID. Using this parameter, the program can implement a reversible conversion between sample labels and [0, N) consecutive integers. Provide compatible phenotype data for downstream classification tasks. --norm-mode : Normalization algorithm, optional values [0-1, max-min, z-score]. Default is z-score","title":"Phenotyp data preprocessing module"},{"location":"Parameters/#population-structure-analysis-module","text":"Boolean -s , --structure : Call the population structure analysis module. --structure-plot : Call the population structure plot function. A total of 2 or 3 scatter plots are displayed to show the results of dimensionality reduction and clustering. --sgroupfile-header : The groupID data file contains the header. necessary --genofile-path : The path of the genotype data file. The pre-processed results are often used as input. semi-necessary --n-clusters : the number of clusters. This parameter is only used when --cluster-mode = kmeans . --sgroupfile-path : GroupID data file path. --sgroupfile-sep : GroupID data file separator. Default is ',' --sgroupfile-column : The column index that stores groupID. This parameter is only used when the number of --sgroupfile-path file columns is greater than 2. optional --redim-mode : Dimension reduction algorithm, optional value [tsne, pca]. Default is pca --pca-explained-var : The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the dimension of the data after pca dimensionality reduction; when the parameter value is a decimal, it indicates the amount of variation that can be explained by the data after pca dimensionality reduction. Default is 0.95. This parameter is only used when --redim-mode = pca --window-size : Sliding window size in dimensionality reduction. Because the calculation speed of the t-SNE dimensionality reduction algorithm decreases significantly with increasing dimensions, the program performs a preliminary dimensionality reduction on the data by sliding windows. Default is 20. This parameter is only used when --redim-mode = tsne . --tsne-dim : The dimension of the t-SNE algorithm after dimensionality reduction. Default is 2. This parameter is only used when --redim-mode = tsne . --cluster-mode : Dimension reduction algorithm, optional value [tsne, pca]. Default is Kmeans. --optics-min-samples : The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the minimum number of samples required to form the core point; when the parameter value is a decimal number, it indicates the ratio of the minimum number of samples required to form the core point to the total sample number. This parameter is only used when --cluster-mode = optics . Default is 0.025 --optics-xi : The minimum value of the reachable distance gradient required for the aggregation class. This parameter is only used when --cluster-mode = optics . Default is 0.05 --optics-min-cluster-size : The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the minimum number of samples required for the aggregation. When the parameter value is a decimal number, it indicates the minimum number of samples required for the aggregation. This parameter is only used when --cluster-mode = optics . Default is 0.03","title":"Population structure analysis module"},{"location":"Parameters/#training-model-snp-selection-and-phenotype-prediction-module","text":"Boolean -e , --engine : Call the training model, SNP selection and phenotype prediction module. -t , --train : Call the training model function. -cv : Call the cross-validation function. -p , --predict : Call the phenotype prediction function. -sf , --select-feature : Call SNP selection function. --bygain-boxplot : Draws a boxplot that keeps changing as the SNP is added to the model. This parameter is used when -sf is specified. semi-necessary --traingeno : The path to the genotype data file for the training set. The file separator is ',', the first line is SNPID, and the first column is sampleID. This parameter is used when -t or -cv is specified. --trainphe : The path to the phenotype data file for the training set. The file separator is ',', including the header, and the first column is sampleID information. This parameter is used when -t or -cv is specified. --testgeno : The path to the genotype data file for the test set. File format is the same as --traingeno . This parameter is used when -p is specified. --modelfile-path : The path of the LightGBM model file. The program uses this model to complete the phenotype prediction of the test set. This parameter is used when -p is specified. optional --validgeno : The path to the genotype data file for the validation set. File format is the same as --traingeno . This parameter is used when -t is specified. --trainphe : Path to the sampleID file of the validation set sample. File format is the same as --traingeno . This parameter is used when -t is specified. --init-model-path : The path of the initial model file. The LightGBM algorithm will continue to train on this model. Commonly used for batch training of big data. This parameter is used when -t or -cv is specified. --min-detal : The minimum percentage of model accuracy improvement per training. The program returns the number of times the model is trained when the accuracy is less than this threshold and the accuracy of the cross-validation of the model. When objective=regression , the accuracy is the mean of the mse between the predicted result and the true value. This parameter is used when -cv is specified. Default is 0.5 --cv-times : Number of repetitions for cross-validation. This parameter is used when -sf is specified. Default is 5 --cv-nfold : The number of folds per cross-validation. This parameter is used when -cv is specified. Default is 5 --gain-min : calculate the total gain of each SNP in the model, and use the product of the maximum gain and --gain-min as the threshold. When the total gain of the SNP in the model is less than the threshold, this SNP will not be selected. This parameter is used when -sf and --bygain-boxplot are specified. Default is 0.05 --colorbar-max : The product of the maximum gain of each SNP in each tree and --colorbar-max will be used as the maximum value of colorbar in the heat map. This parameter is used when -sf is specified. Default is 0.6","title":"Training model, SNP selection and phenotype prediction module"},{"location":"Parameters/#lightgbm-parameters","text":"--learning-rate : The learning rate of the model. Default is 0.1 --num-leaves : The maximum number of leaves per decision tree. Default is 10 --num-threads : The number of CPU threads available for core module operation calls. Default is 0, which is the default number of threads in OpenMP. --min-data-in-leaf : The minimum number of samples in each leaf. Default is 1 --objective : The type of purpose for model training. Default is 'regression' --device-type : The device type called by training model, optional value ['cpu', 'gpu']. Default is 'cpu' --max-depth : The maximum depth of the decision tree. If the value is <= 0, there is no maximum depth limit. Default is -1 --feature-fraction : The proportion of features used in training the model to the total number of features. Default is 1 --verbosity : Controls the complexity of information output during model training. <0: Fatal, = 0: Error (Warning), = 1: Info,> 1: Debug. Default is 0 --num-class : The number of classes in the training set. This parameter is only called for multi-class tasks, that is, --objective: multiclass . Default is 1 --num-boost-round : The number of training (iterations) of the model. Default is 100 --early-stopping-rounds : This parameter should not be called only if -cv or -t has a validation set. After every N rounds of training (N is the value of the user-defined parameter), the program will calculate the prediction accuracy of the model on the validation set. If the prediction accuracy no longer improves, the model will stop training immediately. This parameter can be used to prevent model training from overfitting. Default is 20 --verbose-eval : This parameter should not be called only when -cv or -t has a validation set. After each N rounds of training (N is the value of the user-defined parameter), the program will calculate the prediction accuracy of the model on the validation set and output it. Default is 10","title":"LightGBM parameters"},{"location":"QuickStart/","text":"QuickStart This section briefly introduces the functions and usage of CropGBM to help users get started quickly. For a detailed introduction to CropGBM, see Tutorial Installation $ tar -zxf CropGBM.tar.gz # Install Python package dependencies of CropGBM: setuptools, wheel, numpy, scipy, pandas, scikit-learn, lightgbm, matplotlib, seaborn $ pip install setuptools wheel numpy scipy pandas scikit-learn lightgbm matplotlib seaborn # Install external dependencies of CropGBM: PLINK 1.90 $ wget s3.amazonaws.com/plink1-assets/plink_linux_x86_64_20191028.zip $ mkdir plink_1.90 $ unzip plink_linux_x86_64_20191028.zip -d ./plink_1.90 # Add CropGBM, PLINK to the system environment variables for quick use: $ vi ~/.bashrc export PATH=\"/userpath/CropGBM:$PATH\" export PATH=\"/userpath/plink1.90:$PATH\" $ source ~/.bashrc Parameter configuration CropGBM supports two parameter assignment forms: 'configuration file' and 'command line', of which 'configuration file' is required. CropGBM will read the values of the parameters in the configuration file first, and then read the values of the parameters in the command line. When a parameter is assigned by both methods at the same time, CropGBM uses the parameter value in the command line as a reference and ignores the parameter value in the configuration file. # CropGBM reads the values of each parameter in the configuration file (-c config_path) and calls the genotype data preprocessing module (-pg all) $ cropgbm -c config_path -pg all # CropGBM ignores the fileformat value in the configuration file and uses ped as a reference $ cropgbm -c config_path -pg all --fileformat ped NOTE: If the program does not work, try adding python before the program name. E.g. _ $ python cropgbm -c config_path -pg all_ Genotype data pre-processing The functions of the genotype data pre-processing module include: extracting the genotype data of specific sample ID and SNPID, displaying the SNP deletion rate, heterozygosity in the form of histogram and genotype recoding. Provide data and acceptable file formats for downstream analysis of the program. CropGBM currently supports ped, bed, vcf, and bcv input formats for genotype files. # Call the genotype data pre-processing module to count and display the missing rate and heterozygosity rate of genotype data $ cropgbm -c config_path -o savepath -pg all --fileprefix genofile --fileformat ped Phenotype data pre-processing The functions of the phenotype data pre-processing module include: extracting phenotype data of specific sample ID, SNPID, groupID, phenotype normalization and phenotype recoding. It also supports displaying the distribution of data in the form of histograms or boxplots. # Call the phenotype data preprocessing module (-pp) for normalization (--phe_norm) $ cropgbm -c config_path -o savepath -pp --phe_norm # Extract phenotypic data based on the groupID (--ppgroupfile-path groupfile.txt) and display it as a boxplot $ cropgbm -c config_path -o savepath -pp --phe-plot --phefile-path phefile.txt --ppgroupfile-path groupfile.txt Population structure analysis The population structure analysis module can analyze the population structure of a sample based on genotype data. CropGBM supports dimensionality reduction using t-SNE or PCA methods and clustering using OPTICS or Kmeans methods. It also supports displaying the population structure of samples in the form of scatter plots. # Call the population structure analysis module (-s) to cluster and display samples based on genotype data (--structure-plot) $ cropgbm -c config_path -o savepath -s --structure-plot --genofile-path genofile --n-clusters 8 Building models and SNP selection The model training module is mainly written based on the lightGBM algorithm. To improve the accuracy of the model, it is recommended to provide a validation set to assist in tuning. If there is no validation set, cross validation can be used to select appropriate parameter values. CropGBM select SNP based on the gain of each SNP in the training model. It also supports the use of boxplot and heatmap to show the importance of the selected SNP. # Cross-validation (-e -cv) $ cropgbm -c config_path -o savepath -e -cv --traingeno train1.geno --trainphe train1.phe # Build model (-e -t). If there is no validation set data, the --validgeno and --validphe parameters can be omitted. $ cropgbm -c config_path -o savepath -e -t --traingeno train1.geno --trainphe train1.phe --validgeno valid.geno --validphe valid.phe # SNP selection (-e -t -sf), showing changes in model prediction accuracy (--bygain-boxplot) $ cropgbm -c config_path -o savepath -e -t -sf --bygain-boxplot --traingeno genofile --trainphe phefile Phenotype prediction The phenotype prediction module uses the trained model to predict the phenotype of the test set. # Phenotype prediction (-e -p) $ cropgbm -c config_path -o savepath -e -p --testgeno genofile --modelfile-path modelfile","title":"QuickStart"},{"location":"QuickStart/#quickstart","text":"This section briefly introduces the functions and usage of CropGBM to help users get started quickly. For a detailed introduction to CropGBM, see Tutorial","title":"QuickStart"},{"location":"QuickStart/#installation","text":"$ tar -zxf CropGBM.tar.gz # Install Python package dependencies of CropGBM: setuptools, wheel, numpy, scipy, pandas, scikit-learn, lightgbm, matplotlib, seaborn $ pip install setuptools wheel numpy scipy pandas scikit-learn lightgbm matplotlib seaborn # Install external dependencies of CropGBM: PLINK 1.90 $ wget s3.amazonaws.com/plink1-assets/plink_linux_x86_64_20191028.zip $ mkdir plink_1.90 $ unzip plink_linux_x86_64_20191028.zip -d ./plink_1.90 # Add CropGBM, PLINK to the system environment variables for quick use: $ vi ~/.bashrc export PATH=\"/userpath/CropGBM:$PATH\" export PATH=\"/userpath/plink1.90:$PATH\" $ source ~/.bashrc","title":"Installation"},{"location":"QuickStart/#parameter-configuration","text":"CropGBM supports two parameter assignment forms: 'configuration file' and 'command line', of which 'configuration file' is required. CropGBM will read the values of the parameters in the configuration file first, and then read the values of the parameters in the command line. When a parameter is assigned by both methods at the same time, CropGBM uses the parameter value in the command line as a reference and ignores the parameter value in the configuration file. # CropGBM reads the values of each parameter in the configuration file (-c config_path) and calls the genotype data preprocessing module (-pg all) $ cropgbm -c config_path -pg all # CropGBM ignores the fileformat value in the configuration file and uses ped as a reference $ cropgbm -c config_path -pg all --fileformat ped NOTE: If the program does not work, try adding python before the program name. E.g. _ $ python cropgbm -c config_path -pg all_","title":"Parameter configuration"},{"location":"QuickStart/#genotype-data-pre-processing","text":"The functions of the genotype data pre-processing module include: extracting the genotype data of specific sample ID and SNPID, displaying the SNP deletion rate, heterozygosity in the form of histogram and genotype recoding. Provide data and acceptable file formats for downstream analysis of the program. CropGBM currently supports ped, bed, vcf, and bcv input formats for genotype files. # Call the genotype data pre-processing module to count and display the missing rate and heterozygosity rate of genotype data $ cropgbm -c config_path -o savepath -pg all --fileprefix genofile --fileformat ped","title":"Genotype data pre-processing"},{"location":"QuickStart/#phenotype-data-pre-processing","text":"The functions of the phenotype data pre-processing module include: extracting phenotype data of specific sample ID, SNPID, groupID, phenotype normalization and phenotype recoding. It also supports displaying the distribution of data in the form of histograms or boxplots. # Call the phenotype data preprocessing module (-pp) for normalization (--phe_norm) $ cropgbm -c config_path -o savepath -pp --phe_norm # Extract phenotypic data based on the groupID (--ppgroupfile-path groupfile.txt) and display it as a boxplot $ cropgbm -c config_path -o savepath -pp --phe-plot --phefile-path phefile.txt --ppgroupfile-path groupfile.txt","title":"Phenotype data pre-processing"},{"location":"QuickStart/#population-structure-analysis","text":"The population structure analysis module can analyze the population structure of a sample based on genotype data. CropGBM supports dimensionality reduction using t-SNE or PCA methods and clustering using OPTICS or Kmeans methods. It also supports displaying the population structure of samples in the form of scatter plots. # Call the population structure analysis module (-s) to cluster and display samples based on genotype data (--structure-plot) $ cropgbm -c config_path -o savepath -s --structure-plot --genofile-path genofile --n-clusters 8","title":"Population structure analysis"},{"location":"QuickStart/#building-models-and-snp-selection","text":"The model training module is mainly written based on the lightGBM algorithm. To improve the accuracy of the model, it is recommended to provide a validation set to assist in tuning. If there is no validation set, cross validation can be used to select appropriate parameter values. CropGBM select SNP based on the gain of each SNP in the training model. It also supports the use of boxplot and heatmap to show the importance of the selected SNP. # Cross-validation (-e -cv) $ cropgbm -c config_path -o savepath -e -cv --traingeno train1.geno --trainphe train1.phe # Build model (-e -t). If there is no validation set data, the --validgeno and --validphe parameters can be omitted. $ cropgbm -c config_path -o savepath -e -t --traingeno train1.geno --trainphe train1.phe --validgeno valid.geno --validphe valid.phe # SNP selection (-e -t -sf), showing changes in model prediction accuracy (--bygain-boxplot) $ cropgbm -c config_path -o savepath -e -t -sf --bygain-boxplot --traingeno genofile --trainphe phefile","title":"Building models and SNP selection"},{"location":"QuickStart/#phenotype-prediction","text":"The phenotype prediction module uses the trained model to predict the phenotype of the test set. # Phenotype prediction (-e -p) $ cropgbm -c config_path -o savepath -e -p --testgeno genofile --modelfile-path modelfile","title":"Phenotype prediction"},{"location":"Tutorial/","text":"Tutorial This section uses the command line to assign parameters to CropGBM, introduces the implementation of each function of the program in detail, and displays some results to help users configure the corresponding parameters according to the research purpose. The tutorial uses 6210 F1 offspring maize genome SNP data obtained by crossing 207 maternal and 30 paternal lines. Each sample contains 4903 SNP sites. Download address: XXX Parameter configuration CropGBM supports two parameter assignment forms: 'configuration file' and 'command line', of which 'configuration file' is required. CropGBM will read the values of the parameters in the configuration file first, and then read the values of the parameters in the command line. When a parameter is assigned by both methods at the same time, CropGBM uses the parameter value in the command line as a reference and ignores the parameter value in the configuration file. The configuration file is a collection of parameters and their corresponding values in one file, which is convenient for users to uniformly manage and reuse a large number of parameters. The configuration file format is as follows: [preprocessed_geno] # boolean phe_norm = false phe_plot = true # necessary phefile_path = /home/xyt/GBM_test3/8652.phe # semi-necessary ppgroupfile_path = ppgroupid_column = ppgroupfile_sep = # optional phefile_sep = ' ' phe_column = 13 norm_mode = z-score [preprocessed_geno] The name of the module. The parameters below are only used when the module is called. (The parameters under the [DEFAULT] module can be called in other modules). # boolean Boolean parameters. When assigning, the program will execute the function corresponding to the parameter. Otherwise, the program will not execute the corresponding function. # necessary Necessary parameters. If the parameter is not assigned a value, an error will be reported when calling the module. # semi-necessary Semi-necessary parameters, If the parameter is not assigned, an error will be reported when calling specific function. # optional optional parameters, If the parameter is not assigned, certain functions cannot be used, but no error is reported. For the convenience of users, the program contains a configuration file named configfile.params after decompression. By modifying the configuration file, users can quickly and massively assign values to parameters. Parameters weith default values have been assigned default values in the configuration file, such as norm_mode=z-score. Usrs can also change the parameter values according to their needs. When the parameter value is empty, None, false, False, if the parameter contains the default value, the default value will be used, otherwise the program thinks that this parameter has not been assigned a value. Genotype data pre-processing Screen out non-compliant sample individuals and SNP sites based on deletion rate and MAF Fill missing SNP data based on high frequency genotypes Remove redundant SNP according to r ^ 2 Genotype data recoding (genotype -> 012) Extract specific genotype data of specific samples based on SNPID or sampleID Visualization of heterozygosity, deletion, and frequency distribution of MAF for genotype data CropGBM calls PLINK to complete part of the pre-processing of the genotype data, and provides identifiable file formats and data for downstream analysis. CropGBM will create a folder named preprocessed under the output path specified by the user, and store the output files in this directory. Input: ped, bed, vcf, bcf format files Output: filename_filter.bed / bim / fam / ped / map, filename.log / prune.in / .prune.out / frqx / imiss / irem / lmiss, filename_filter.geno, filename_maf / het / imiss / lmiss.pdf Pre-processing data $ cropgbm -c configfile.params -o gbm_result/ -pg all --fileprefix genofile --fileformat vcf --snpmaxmiss 0.10 --samplemaxmiss 0.10 --maf_max 0.05 --r2_cutoff 0.7 -c Configuration file path: configfile.params -o Output path of program running result: gbm_result/ -pg Call preprocessed genotype data module, optional values [all, filter]. The 'all' indicates that the program will call the complete pre-processing module, including: statistical and visual data basics, screening out non-compliant sample individuals and SNP sites based on the deletion rate, MAF, and filling the missing data of SNP based on high-frequency genotypes, removing redundant SNP according to r ^ 2, extracting specific genotype data function of specific sample according to SNPID or sampleID. The 'filter' indicates that the program will call part of the preprocessing module, which only includes the specific extraction of specific samples according to SNPID or sampleID: all --fileprefix Genotype data file name prefix: genofile --fileformat Genotype data file format, optional values [ped, bed, vcf, bcf]: vcf --snpmaxmiss SNP maximum deletion rate. SNP whose deletion rate exceeds this threshold will be eliminated. Default is 0.05: 0.10 --samplemaxmiss Sample maximum missing rate. Samples whose missing rate exceeds this threshold will be rejected. Default is 0.05: 0.10 --maf_max Minimum allele frequency. SNP whose minimum allele frequency is less than this threshold will be eliminated. Default is 0.01: 0.05 --r2_cutoff Equivalent to the --indep-pairwise parameter in PLINK. Default is 0.8: 0.7 Output files genofile_filter.bed / bim / fam / ped / map, genofile.frqx / imiss / irem / lmiss / prune.in / prune.out, filename_maf / het / imiss / lmiss.pdf: genofile_filter.bed/bim/fam bed format file, and the encoding method of the genotype is ATCG-> 013 (minor-> 0, major-> 1, miss-> 3), which prepares for subsequent re-encoding into additive encoding. Because PLINK can quickly read and process bed files, such files can be used as intermediate files for generating training, test, and validation sets. genofile_filter.ped/map ped format file for genotype re-encoding (-> 012), and the encoding method of the genotype is ATCG-> 01, preparing for subsequent re-encoding into additive encoding (minor-> 0, major-> 1 , Miss-> 3). genofile.frqx contains the number of each genotype per SNP locus. genofile_het.pdf SNPs heterozygosity distribution histogram. The horizontal axis is the SNP heterozygosity, and the vertical axis is the number of SNP in the interval. (fig 1) genofile_maf.pdf SNPs MAF distribution histogram. The horizontal axis is the minimum allele frequency of SNP, and the vertical axis is the number of SNP in the interval. genofile.imiss contains the missing rate of each sample. genofile_imiss.pdf Histogram of sample missing rate distribution. The horizontal axis is the sample missing rate, and the vertical axis is the number of samples in the interval. genofile.irem contains the sampleID that was rejected because the missing rate exceeded the threshold. genofile.lmiss contains the missing rate of each SNP site. genofile_lmiss.pdf Histogram of SNP missing rate distribution. The horizontal axis is the SNP deletion rate, and the vertical axis is the number of SNP in the interval. genofile.prune.in / prune.out SNPid retained (.prune.in) / removed (.prune.out) after indep genofile_plink.log The log file output when the program calls PLINK. genofile_preprocessed.log Standard output when the program calls PLINK. fig 1 Extract specific sampleID and snpID data $ cropgbm -c configfile.params -o gbm_result/ -pg filter --fileprefix genofile --keep-sampleid-path ksampleid_file.txt --extract-snpid-path ksnpid_file.txt --keep-sampleid-path sampleID file path. It can only identify files whose separator is a space or a tab. Read the first two columns of data (the first column is familyID and the second column is within-familyID). Extract the sample based on the sampleID in the file: ksampleid_file.txt --extract-snpid-path snpID file path, extract snp according to the snpID in the file: ksnpid_file.txt _ $ cropgbm -c configfile.params -o gbm_result / -pg filter --fileprefix genofile --remove-sampleid-path rsampleid_file.txt --exclude-snpid-path rsnpid_file.txt_ --remove-sampleid-path sampleID file path. It can only identify files with spaces or tabs. Read the first two columns of data (the first column is familyID and the second column is within-). Remove samples based on the sampleID in the file: rsampleid_file.txt --exclude-snpid-path snpID file path, remove snp according to the snpID in the file: rsnpid_file.txt Note: The input file in -pg filter mode only accepts bed format files. It is designed to generate the training set, test set, validation set, etc. from the bed intermediate files generated in all mode according to different requirements. Recode bed format data $ cropgbm -c configfile.params -o gbm_result/ -pg filter --fileprefix genofile --recode --remove-sampleid-path rsampleid_file.txt --exclude-snpid-path rsnpid_file.txt --recode Change the encoding method of genotype data to additive encoding, the change rules are: 00-> 0, 01-> 1, 10-> 1, 11-> 2 The output file is genofile_filter.bed / bim / fam / ped / map / geno: genofile_filter.bed / bim / fam / ped / map is the output file after filter genofile_filter.geno is the re-encoded output file, the sampleID is within-familyID in the ped file Overall use of parameters $ cropgbm -c configfile.params -o gbm_result/ -pg all --fileprefix genofile --fileformat ped --snpmaxmiss 0.10 --snpmaxmiss 0.10 --maf_max 0.05 --r2_cutoff 0.7 --recode --keep-sampleid-path ksampleid_file.txt --extract-snpid-path ksnpid_file.txt The output files are filename_filter.bed / bim / fam / ped / map, filename.prune.in/.prune.out/frqx/imiss/irem/lmiss, filename_filter.geno, filename_maf / het / imiss / lmiss.pdf Note: The above parameters except -c and -pg can be set in the configuration file and omitted on the command line. Phenotype data pre-processing Extract specific sample phenotype data based on sampleID or groupID Phenotype data normalization Visualization of phenotype data distribution Phenotype data re-encoding (multi-classification problem) CropGBM uniformly stores the output files in the preprocessed folder under the user-specified save path. Input: phenotype data with at least two columns. The program treats the first column of data as a sampleID. Output: phefile.phe, phefile.phenorm, phefile_groupN.phe, phefile_groupN.phenorm, phefile.numphe, phefile.wordphe, phefile.word2num, phefile_scatter.pdf, phefile_plotdd.pdf Extract and visualize specific phenotype data $ cropgbm -c configfile.params -o gbm_result/ -pp --phe-plot --phefile-path phefile.txt --phefile-header --phefile-sep ',' --phe-column 2 -pp Call the preprocessed phenotype data module. --phe-plot Calls phenotype data visualization functions. --phefile-path Phenotype data file path: phefile. --phefile-header The phenotype data file contains headers. --phefile-sep Phenotype data file separator. Default is ',': ',' --phe-column The column index in the phenotype data file that stores phenotype information. This parameter is only called when the number of columns in the phenotype file is greater than 2. Default is 2: 2 The output files are phefile.phe, phefile_plotdd.pdf: phefile.phe is the output file for the extracted specific phenotype data. The file has a total of two columns (sampleID, phenotype value), including the header. phefile_plotdd.pdf Phenotype data distribution histogram. The abscissa is the phenotype value, and the ordinate is the number. (fig 2) fig 2 Extract phenotype data by sampleID $ cropgbm -c configfile.params -o gbm_result/ -pp --phefile-path phefile.txt --phefile-header --phefile-sep ',' --phe-column 2 --ppexsampleid-path ppexsampleid.txt --ppexsampleid-path sampleID file path. The file content requirement is only a list of sampleID. The program extracts the phenotype data of the corresponding sample in the phenotype data file according to the sampleID in the file: ppexsampleid.txt The output file is phefile.phe: phefile.phe is an output file that extracts specific sample phenotype data based on the sampleID. Extract and visualize the phenotype data by groupID $ cropgbm -c configfile.params -o gbm_result/ -pp --phe-plot --phefile-path phefile.txt --phefile-sep ',' --phe-column 2 --ppgroupfile-path phefile.txt --ppgroupfile-sep ',' --ppgroupid-column 3 --ppgroupfile-header --ppgroupfile-path GroupID data file path: phefile.txt --ppgroupfile-header GroupID data file contains headers. --ppgroupfile-sep GroupID data file separator. Default is ',' :, --ppgroupid-column The column index where groupID information is stored in the groupID data file. This parameter is only used when the number of ppgroupfile columns is greater than 2. Default is 2: 3 The output files are phefile_groupN.phe, phefile_scatter.pdf: phefile_groupX.phe is an output file that extracts phenotype data of the same group of samples according to the groupID of the sample, where X is the groupID of the sample. Generate a total of N files, each file contains only the sample belonging to the groupX and its phenotype data, where N is the number of groups. phefile_scatter.pdf displays the distribution of phenotype data in each group in the form of scatter plots and boxplots. The abscissa is the groupID and the ordinate is the phenotype value. Each point represents a sample. (fig 3) fig 3 Normalize and visualize phenotype data $ cropgbm -c configfile.params -o gbm_result/ -pp --phe-plot --phefile-path phefile.txt --phefile-sep ',' --phe-column 2 --ppgroupfile-path phefile.txt --ppgroupfile-sep ',' --ppgroupid-column 3 --ppgroupfile-header --phe_norm --norm-mode z-score --phe_norm calls the phenotype data normalization function. --norm-mode Normalization algorithm, optional values [0-1, max-min, z-score]. Default is z-score: z-score The output files are phefile_groupN.phenorm, phefile_scatter.pdf: phefile_groupX.phenorm is an output file after extracting and normalizing the phenotype data of the same group of samples according to the groupID of the sample, where X is the groupID of the sample. Generate a total of N files, each file contains only the sample belonging to the groupX and its phenotype data, where N is the number of groups of samples phefile_scatter.pdf shows the distribution of normalized phenotype data in each group in the form of scatter plots and boxplots. The abscissa is the groupID, and the ordinate is the phenotype value. Each point represents a sample. (fig 4) fig 4 Recoding phenotype data (multi-classification) $ cropgbm -c configfile.params -o gbm_result/ -pp --phe-recode word2num --phefile-path phefile.txt --phefile-sep ',' --phe-column 2 --phe-recode Calls the phenotype data recoding function, optional values\u200b[word2num, num2word]. Word2num means re-encoding phenotype data into continuous non-negative integer form, and num2word means re-encoding continuous non-negative integer form into phenotype data (requires conversion table of integer and phenotype). When performing classification tasks, LightGBM only accepts consecutive integers with example labels [0, N). If the training sample comes from 5 groups, [0, 1, 2, 3, 4] is required as the label of the 5 groups, but this usually does not match the actual group name. Using this parameter, the program can implement a reversible conversion between sample labels and [0, N) consecutive integers. Provide compatible phenotype data for downstream classification tasks: word2num The output files are phefile.numphe, phefile.word2num: phefile.numphe is an output file that recodes phenotype data into consecutive non-negative integers. Because LightGBM requires the coding form of each category to be a continuous non-negative integer starting from 0 when predicting classification problems, the actual phenotype data is difficult to meet this requirement. The program uses the phenotype data re-encoding function to achieve the above conversion. phefile.word2num is a correspondence file between phenotype data and continuous non-negative integer encoding. _ $ cropgbm -c configfile.params -o gbm_result / -pp --phe-recode num2word -num2wordfile-path phefile.word2num --phefile-path phefile.txt --phefile-sep ',' --phe-column 2_ --num2wordfile-path Integer and phenotype corresponding to the conversion table file path. This parameter is only used when --phe-recode = num2word : phefile.word2num The output file is phefile.wordphe: phefile.wordphe is an output file that recodes consecutive non-negative integers into phenotype data Note: The re-encoding function is mainly used to transform phenotype data when predicting classification problems. Word2num is commonly used to convert the phenotype data of the training set samples into a format that can be processed by the program, and num2word is often used to convert the prediction results of the test set into the original phenotype data format. Population structure analysis Analysis of population structure based on genotype data Input : genotype data Output : filename.cluster, filename_redim.pdf, filename_cluster.pdf, filename_reachability.pdf PCA-Kmeans analyze and visualize $ cropgbm -c configfile.params -o gbm_result/ -s --genofile-path filename_filter.geno --structure_plot --redim-mode pca --pca-explained-var 0.98 --cluster-mode kmeans --n-clusters 30 -s Calls the population structure analysis module. --genofile-path The path of the genotype data file, often the preprocessed result is used as input: filename_filter.geno --structure-plot Calls the population structure plot function. A total of 2 (3) scatter plots are displayed showing the results of dimensionality reduction and clustering. --redim-mode Dimension reduction algorithm, optional value [tsne, pca]. Default is pca: pca --pca-explained-var The parameter value is an integer greater than 1 or a decimal value between 0-1. When the parameter value is an integer, it indicates the dimension of the data after pca dimensionality reduction; when the parameter value is a decimal, it indicates the amount of variation that can be explained by the data after pca dimensionality reduction. This parameter is only used when --redim-mode = pca . Default is 0.95: 0.98 --cluster-mode Clustering algorithm, optional value [kmeans, optics]. Default is kmeans: kmeans --n-clusters The number of clusters. This parameter is only used when --cluster-mode = kmeans : 30 (Because it is known that the dataset is obtained by crossing 207 fathers with 30 mothers) Output files filename.cluster, filename_redim.pdf, filename_cluster.pdf: filename.cluster is the output file for the clustering results. The content is two columns: sampleID, groupID. Where the groupID is '-1' means this sample is not clustered. filename_redim.pdf displays the dimensionality reduction results in the form of a scatter plot. (fig 5) filename_cluster.pdf displays the clustering results in the form of a scatter plot, with different groupID indicated by different colors. (fig 6) fig 5 fig 6 t-SNE-OPTICS analyze and visualize The t-SNE and OPTICS algorithms are more suitable for data set with unknown population categories. PCA and Kmeans algorithms are recommended when the number of population groups is known. $ cropgbm -c configfile.params -o gbm_result/ -s --genofile-path filename_filter.geno --structure_plot --redim-mode tsne --window-size 50 --tsne-dim 2 --cluster-mode optics --optics-min-sample 0.025 --optics-xi 0.01 --optics-min-cluster-size 0.03 --window-size Sliding window size in dimension reduction. Since the calculation speed of the t-SNE algorithm decreases significantly with increasing dimensions, the program performs a preliminary dimensionality reduction on the data by sliding windows. When the number of snp is small, the parameters have a greater impact on the dimensionality reduction results. It is recommended to reduce the parameter value as the number of snp decreases. Default is 20. This parameter is only used when --redim-mode = tsne : 50 --tsne-dim Dimension of data after dimension reduction of t-SNE algorithm. This parameter is only used when --redim-mode = tsne . Default is 2: 2 --optics-min-samples The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the minimum number of samples required to form the core point; when the parameter value is a decimal number, it indicates the ratio of the minimum number of samples required to form the core point to the total sample number. This parameter is only used when --cluster-mode = optics . Default is 0.025: 0.05 --optics-xi Minimum value of the reachable distance gradient required for clustering. This parameter is only used when --cluster-mode = optics . Default is 0.05: 0.05. --optics-min-cluster-size The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the minimum number of samples required for the aggregation. When the parameter value is a decimal number, it indicates the ratio of the minimum number of samples required for the aggregation to the total number of samples. This parameter is only used when --cluster-mode = optics . Default is 0.03: 0.06 Output files filename.cluster, filename_redim.pdf, filename_cluster.pdf, filename_reachability.pdf: filename.cluster Output file for the clustering results. The content is two columns: sampleID, groupID. A groupID of '-1' indicates that this sample is not clustered. filename_redim.pdf displays the dimensionality reduction results in the form of a scatter plot. (fig 7) filename_cluster.pdf displays the clustering results in the form of a scatter plot, with different groupIDs indicated by different colors. (fig 8) filename_reachability.pdf displays the reachable distance between each sample in the form of a scatter plot, which is only output when --redim-mode = tsne . Different categories are represented by different colors, and discrete points are represented by black. (fig 9) fig 7 fig 8 fig 9 Compare the differences between results and label $ cropgbm -c configfile.params -o gbm_result/ -s --genofile-path filename_filter.geno --structure_plot --redim-mode tsne --window-size 50 --tsne-dim 2 --cluster-mode optics --optics-min-sample 0.025 --optics-xi 0.01 --optics-min-cluster-size 0.03 --sgroupfile-path phefile.txt --sgroupfile-sep ',' --sgroupid-column 3 --sgroupfile-header --sgroupfile-path Group label data file path: phefile.txt --sgroupfile-sep Group label data file separator: ',' --sgroupfile-column The column index in the group label data file that stores group label information. This parameter is only used when the number of --sgroupfile-path file columns is greater than 2: 3 --sgroupfile-header The group label data file file contains headers. Output files filename.cluster, filename_redim.pdf, filename_cluster.pdf, filename_reachability.pdf: filename.cluster Output file for the clustering results. The content is two columns: sampleID, groupID. A groupID of '-1' indicates that this sample is not clustered. filename_redim.pdf displays the dimensionality reduction results in the form of a scatter plot. When the parameter --sgroupfile-path is assigned, the program will mark the true labels of each sample on the basis of the dimensionality reduction map, and different group are indicated by different colors. (fig 10) filename_cluster.pdf displays the clustering results in the form of a scatter plot, with different groups indicated by different colors. (fig 11) filename_reachability.pdf displays the reachable distance between each sample in the form of a scatter plot, which is only output when --redim-mode=tsne . Different groups are represented by different colors. The discrete points are represented by black. fig 10 fig 11 Training model SNP selection Training model SNP selection Input : genotype data, phenotype data Output : filename.lgb_model, filename_bygain.pdf, filename_random.pdf, filename_heatmap.pdf The program allows the user to modify some parameters in the LightGBM algorithm according to the research purpose. But because there are many parameters, this tutorial does not introduce them. For related content, please refer to: Program parameters> SNP selection and phenotype prediction > LightGBM parameter Cross-validation During model training, if there is no validation set to help determine whether the model is overfitting, it is recommended to use -cv to determine a reasonable number of trainings. $ cropgbm -c configfile.params -o gbm_result/ -e -cv --traingeno train1.geno --trainphe train1.phe --cv-nfold 5 --min-detal 0.5 -e Call the SNP selection and phenotype prediction module. -cv Call the cross-validation function. --traingeno Training set genotype data file path. The file separator is ',', the first line is the snpID information, and the first column is the sampleID information. This parameter is used when -t or -cv is specified: train1.geno --trainphe Path to the training set sample phenotype data file. The file separator is ',', including the header, and the first column is the sampleID information. This parameter is used when -t or -cv is specified: train.phe --cv-nfold Number of folds per cross-validation. Default is 5: 5 --min-detal The minimum percentage improvement in model accuracy per training. The program returns the number of times the model is trained when the accuracy is less than this threshold and the accuracy of the model's cross-validation at this time. When objective = regression , the accuracy is the mean of the mse between the predicted result and the true value. Default is 0.5: 0.5 Training model $ cropgbm -c configfile.params -o gbm_result/ -e -t --traingeno train1.geno --trainphe train1.phe --validgeno valid.geno --validphe valid.phe -t Call the training model function --validgeno Path to the validation set genotype data file. The file separator is ',', the first line is the snpID information, and the first column is the sampleID information. : Valid.geno --validphe The file path of the sampleID in the validation set. The file separator is ',', including the header, the first column is the sampleID: valid.phe _ $ cropgbm -c configfile.params -o gbm_result / -e -t --traingeno train2.geno --trainphe train2.phe --validgeno valid.geno --validphe valid.phe --init-model-path train1.lgb_model_ --init-model-path Path to the starting model file. The LightGBM algorithm will continue to train based on this model. Commonly used for batch training of big data: train1.lgb_model Output file: train1.lgb_model train1.lgb_model Model file. The tree structure of each training and the gain value of each node are recorded. Note: The program recognizes different snp by sequence, not by column name. If the snp of the same index column is different between the two data sets, the program cannot recognize it. Therefore, the training set, test set, and validation set need to be consistent in the order of snp, otherwise the prediction result is non-reference. SNP selection $ cropgbm -c configfile.params -o gbm_result/ -e -t -sf --bygain-boxplot --traingeno train1.geno --trainphe train1.phe --gain-min 0.05 --colorbar-max 0.6 --cv-times 6 -sf Call the SNP selection function. This function is designed to be used in conjunction with the training model function ( -t ) and cannot be used alone. --bygain-boxplot Draws a boxplot that keeps changing as the SNP joins the model. This parameter is used when -sf . --gain-min calculates the total gain of each SNP in the model and uses the product of the maximum gain and --gain-min as the threshold. When the total gain of SNP in the model is less than the threshold, this SNP will not be selected. Default is 0.05: 0.05 --colorbar-max The product of the maximum gain of each SNP in each tree and --colorbar-max will be used as the maximum value of colorbar in the heat map. Default is 0.6: 0.6 --cv-times Number of repetitions for cross-validation. Default is 5: 6 Output files: train1.lgb_model, train1.feature, train1_bygain.pdf, train1_random.pdf, train1_heatmap.pdf train1.lgb_model The model file. The tree structure of each training and the gain value of each node are recorded. train1.feature The SNP gain file. The gain value of each SNP in each decision tree is recorded. train1_bygain.pdf Shows the change of model error with the addition of SNP in the form of a scatter plot. The program repeated the 5-fold cross-validation on the training set using the added SNP. The x-axis coordinate in the figure is the new snpID added in each model, which is added in order from the largest featureGain_sum value of the SNP in the train1.feature file. The y-axis coordinate is the prediction error. (fig 12) train1_random.pdf shows the change of model error with the addition of SNP in the form of boxplots. The x-axis in the figure is the number of SNP used by the model. Since the SNP used in each cross-validation is randomly extracted from all SNP, there is no snpID. The y-axis is the prediction error. (fig 13) train1_heatmap.pdf displays the gain value and change rule of each SNP in different decision tree in the form of a heatmap, that is, the information in the train1.feature file. The x-axis coordinates in the figure are the number of the SNP, and they are arranged according to the featureGain_sum value of the SNP in the train1.feature file. The y-axis coordinate is the decision tree number, and the number represents the number of times the model is trained (for example, tree20 represents the decision tree generated by the 20th training). (fig 14) fig 12 fig 13 fig 14 Phenotype prediction Phenotype prediction Input : genotype data, model files Output : filename.predict $ cropgbm -c configfile.params -o gbm_result/ -e -p --testgeno test.geno --modelfile-path train1.lgb_model -p Call phenotype prediction function. --testgeno Path of the test set genotype data file. The file separator is ',', the first line is the snpID information, and the first column is the sampleID information. This parameter is used when -p is specified: test.geno --modelfile-path The path of the LightGBM model file. The program uses this model to complete the phenotype prediction of the test set. This parameter is used when -p is specified: train1.lgb_model Output file filename.predict: filename.predict Output file of the prediction result.","title":"Tutorial"},{"location":"Tutorial/#tutorial","text":"This section uses the command line to assign parameters to CropGBM, introduces the implementation of each function of the program in detail, and displays some results to help users configure the corresponding parameters according to the research purpose. The tutorial uses 6210 F1 offspring maize genome SNP data obtained by crossing 207 maternal and 30 paternal lines. Each sample contains 4903 SNP sites. Download address: XXX","title":"Tutorial"},{"location":"Tutorial/#parameter-configuration","text":"CropGBM supports two parameter assignment forms: 'configuration file' and 'command line', of which 'configuration file' is required. CropGBM will read the values of the parameters in the configuration file first, and then read the values of the parameters in the command line. When a parameter is assigned by both methods at the same time, CropGBM uses the parameter value in the command line as a reference and ignores the parameter value in the configuration file. The configuration file is a collection of parameters and their corresponding values in one file, which is convenient for users to uniformly manage and reuse a large number of parameters. The configuration file format is as follows: [preprocessed_geno] # boolean phe_norm = false phe_plot = true # necessary phefile_path = /home/xyt/GBM_test3/8652.phe # semi-necessary ppgroupfile_path = ppgroupid_column = ppgroupfile_sep = # optional phefile_sep = ' ' phe_column = 13 norm_mode = z-score [preprocessed_geno] The name of the module. The parameters below are only used when the module is called. (The parameters under the [DEFAULT] module can be called in other modules). # boolean Boolean parameters. When assigning, the program will execute the function corresponding to the parameter. Otherwise, the program will not execute the corresponding function. # necessary Necessary parameters. If the parameter is not assigned a value, an error will be reported when calling the module. # semi-necessary Semi-necessary parameters, If the parameter is not assigned, an error will be reported when calling specific function. # optional optional parameters, If the parameter is not assigned, certain functions cannot be used, but no error is reported. For the convenience of users, the program contains a configuration file named configfile.params after decompression. By modifying the configuration file, users can quickly and massively assign values to parameters. Parameters weith default values have been assigned default values in the configuration file, such as norm_mode=z-score. Usrs can also change the parameter values according to their needs. When the parameter value is empty, None, false, False, if the parameter contains the default value, the default value will be used, otherwise the program thinks that this parameter has not been assigned a value.","title":"Parameter configuration"},{"location":"Tutorial/#genotype-data-pre-processing","text":"Screen out non-compliant sample individuals and SNP sites based on deletion rate and MAF Fill missing SNP data based on high frequency genotypes Remove redundant SNP according to r ^ 2 Genotype data recoding (genotype -> 012) Extract specific genotype data of specific samples based on SNPID or sampleID Visualization of heterozygosity, deletion, and frequency distribution of MAF for genotype data CropGBM calls PLINK to complete part of the pre-processing of the genotype data, and provides identifiable file formats and data for downstream analysis. CropGBM will create a folder named preprocessed under the output path specified by the user, and store the output files in this directory. Input: ped, bed, vcf, bcf format files Output: filename_filter.bed / bim / fam / ped / map, filename.log / prune.in / .prune.out / frqx / imiss / irem / lmiss, filename_filter.geno, filename_maf / het / imiss / lmiss.pdf","title":"Genotype data pre-processing"},{"location":"Tutorial/#pre-processing-data","text":"$ cropgbm -c configfile.params -o gbm_result/ -pg all --fileprefix genofile --fileformat vcf --snpmaxmiss 0.10 --samplemaxmiss 0.10 --maf_max 0.05 --r2_cutoff 0.7 -c Configuration file path: configfile.params -o Output path of program running result: gbm_result/ -pg Call preprocessed genotype data module, optional values [all, filter]. The 'all' indicates that the program will call the complete pre-processing module, including: statistical and visual data basics, screening out non-compliant sample individuals and SNP sites based on the deletion rate, MAF, and filling the missing data of SNP based on high-frequency genotypes, removing redundant SNP according to r ^ 2, extracting specific genotype data function of specific sample according to SNPID or sampleID. The 'filter' indicates that the program will call part of the preprocessing module, which only includes the specific extraction of specific samples according to SNPID or sampleID: all --fileprefix Genotype data file name prefix: genofile --fileformat Genotype data file format, optional values [ped, bed, vcf, bcf]: vcf --snpmaxmiss SNP maximum deletion rate. SNP whose deletion rate exceeds this threshold will be eliminated. Default is 0.05: 0.10 --samplemaxmiss Sample maximum missing rate. Samples whose missing rate exceeds this threshold will be rejected. Default is 0.05: 0.10 --maf_max Minimum allele frequency. SNP whose minimum allele frequency is less than this threshold will be eliminated. Default is 0.01: 0.05 --r2_cutoff Equivalent to the --indep-pairwise parameter in PLINK. Default is 0.8: 0.7 Output files genofile_filter.bed / bim / fam / ped / map, genofile.frqx / imiss / irem / lmiss / prune.in / prune.out, filename_maf / het / imiss / lmiss.pdf: genofile_filter.bed/bim/fam bed format file, and the encoding method of the genotype is ATCG-> 013 (minor-> 0, major-> 1, miss-> 3), which prepares for subsequent re-encoding into additive encoding. Because PLINK can quickly read and process bed files, such files can be used as intermediate files for generating training, test, and validation sets. genofile_filter.ped/map ped format file for genotype re-encoding (-> 012), and the encoding method of the genotype is ATCG-> 01, preparing for subsequent re-encoding into additive encoding (minor-> 0, major-> 1 , Miss-> 3). genofile.frqx contains the number of each genotype per SNP locus. genofile_het.pdf SNPs heterozygosity distribution histogram. The horizontal axis is the SNP heterozygosity, and the vertical axis is the number of SNP in the interval. (fig 1) genofile_maf.pdf SNPs MAF distribution histogram. The horizontal axis is the minimum allele frequency of SNP, and the vertical axis is the number of SNP in the interval. genofile.imiss contains the missing rate of each sample. genofile_imiss.pdf Histogram of sample missing rate distribution. The horizontal axis is the sample missing rate, and the vertical axis is the number of samples in the interval. genofile.irem contains the sampleID that was rejected because the missing rate exceeded the threshold. genofile.lmiss contains the missing rate of each SNP site. genofile_lmiss.pdf Histogram of SNP missing rate distribution. The horizontal axis is the SNP deletion rate, and the vertical axis is the number of SNP in the interval. genofile.prune.in / prune.out SNPid retained (.prune.in) / removed (.prune.out) after indep genofile_plink.log The log file output when the program calls PLINK. genofile_preprocessed.log Standard output when the program calls PLINK. fig 1","title":"Pre-processing data"},{"location":"Tutorial/#extract-specific-sampleid-and-snpid-data","text":"$ cropgbm -c configfile.params -o gbm_result/ -pg filter --fileprefix genofile --keep-sampleid-path ksampleid_file.txt --extract-snpid-path ksnpid_file.txt --keep-sampleid-path sampleID file path. It can only identify files whose separator is a space or a tab. Read the first two columns of data (the first column is familyID and the second column is within-familyID). Extract the sample based on the sampleID in the file: ksampleid_file.txt --extract-snpid-path snpID file path, extract snp according to the snpID in the file: ksnpid_file.txt _ $ cropgbm -c configfile.params -o gbm_result / -pg filter --fileprefix genofile --remove-sampleid-path rsampleid_file.txt --exclude-snpid-path rsnpid_file.txt_ --remove-sampleid-path sampleID file path. It can only identify files with spaces or tabs. Read the first two columns of data (the first column is familyID and the second column is within-). Remove samples based on the sampleID in the file: rsampleid_file.txt --exclude-snpid-path snpID file path, remove snp according to the snpID in the file: rsnpid_file.txt Note: The input file in -pg filter mode only accepts bed format files. It is designed to generate the training set, test set, validation set, etc. from the bed intermediate files generated in all mode according to different requirements.","title":"Extract specific sampleID and snpID data"},{"location":"Tutorial/#recode-bed-format-data","text":"$ cropgbm -c configfile.params -o gbm_result/ -pg filter --fileprefix genofile --recode --remove-sampleid-path rsampleid_file.txt --exclude-snpid-path rsnpid_file.txt --recode Change the encoding method of genotype data to additive encoding, the change rules are: 00-> 0, 01-> 1, 10-> 1, 11-> 2 The output file is genofile_filter.bed / bim / fam / ped / map / geno: genofile_filter.bed / bim / fam / ped / map is the output file after filter genofile_filter.geno is the re-encoded output file, the sampleID is within-familyID in the ped file","title":"Recode bed format data"},{"location":"Tutorial/#overall-use-of-parameters","text":"$ cropgbm -c configfile.params -o gbm_result/ -pg all --fileprefix genofile --fileformat ped --snpmaxmiss 0.10 --snpmaxmiss 0.10 --maf_max 0.05 --r2_cutoff 0.7 --recode --keep-sampleid-path ksampleid_file.txt --extract-snpid-path ksnpid_file.txt The output files are filename_filter.bed / bim / fam / ped / map, filename.prune.in/.prune.out/frqx/imiss/irem/lmiss, filename_filter.geno, filename_maf / het / imiss / lmiss.pdf Note: The above parameters except -c and -pg can be set in the configuration file and omitted on the command line.","title":"Overall use of parameters"},{"location":"Tutorial/#phenotype-data-pre-processing","text":"Extract specific sample phenotype data based on sampleID or groupID Phenotype data normalization Visualization of phenotype data distribution Phenotype data re-encoding (multi-classification problem) CropGBM uniformly stores the output files in the preprocessed folder under the user-specified save path. Input: phenotype data with at least two columns. The program treats the first column of data as a sampleID. Output: phefile.phe, phefile.phenorm, phefile_groupN.phe, phefile_groupN.phenorm, phefile.numphe, phefile.wordphe, phefile.word2num, phefile_scatter.pdf, phefile_plotdd.pdf","title":"Phenotype data pre-processing"},{"location":"Tutorial/#extract-and-visualize-specific-phenotype-data","text":"$ cropgbm -c configfile.params -o gbm_result/ -pp --phe-plot --phefile-path phefile.txt --phefile-header --phefile-sep ',' --phe-column 2 -pp Call the preprocessed phenotype data module. --phe-plot Calls phenotype data visualization functions. --phefile-path Phenotype data file path: phefile. --phefile-header The phenotype data file contains headers. --phefile-sep Phenotype data file separator. Default is ',': ',' --phe-column The column index in the phenotype data file that stores phenotype information. This parameter is only called when the number of columns in the phenotype file is greater than 2. Default is 2: 2 The output files are phefile.phe, phefile_plotdd.pdf: phefile.phe is the output file for the extracted specific phenotype data. The file has a total of two columns (sampleID, phenotype value), including the header. phefile_plotdd.pdf Phenotype data distribution histogram. The abscissa is the phenotype value, and the ordinate is the number. (fig 2) fig 2","title":"Extract and visualize specific phenotype data"},{"location":"Tutorial/#extract-phenotype-data-by-sampleid","text":"$ cropgbm -c configfile.params -o gbm_result/ -pp --phefile-path phefile.txt --phefile-header --phefile-sep ',' --phe-column 2 --ppexsampleid-path ppexsampleid.txt --ppexsampleid-path sampleID file path. The file content requirement is only a list of sampleID. The program extracts the phenotype data of the corresponding sample in the phenotype data file according to the sampleID in the file: ppexsampleid.txt The output file is phefile.phe: phefile.phe is an output file that extracts specific sample phenotype data based on the sampleID.","title":"Extract phenotype data by sampleID"},{"location":"Tutorial/#extract-and-visualize-the-phenotype-data-by-groupid","text":"$ cropgbm -c configfile.params -o gbm_result/ -pp --phe-plot --phefile-path phefile.txt --phefile-sep ',' --phe-column 2 --ppgroupfile-path phefile.txt --ppgroupfile-sep ',' --ppgroupid-column 3 --ppgroupfile-header --ppgroupfile-path GroupID data file path: phefile.txt --ppgroupfile-header GroupID data file contains headers. --ppgroupfile-sep GroupID data file separator. Default is ',' :, --ppgroupid-column The column index where groupID information is stored in the groupID data file. This parameter is only used when the number of ppgroupfile columns is greater than 2. Default is 2: 3 The output files are phefile_groupN.phe, phefile_scatter.pdf: phefile_groupX.phe is an output file that extracts phenotype data of the same group of samples according to the groupID of the sample, where X is the groupID of the sample. Generate a total of N files, each file contains only the sample belonging to the groupX and its phenotype data, where N is the number of groups. phefile_scatter.pdf displays the distribution of phenotype data in each group in the form of scatter plots and boxplots. The abscissa is the groupID and the ordinate is the phenotype value. Each point represents a sample. (fig 3) fig 3","title":"Extract and visualize the phenotype data by groupID"},{"location":"Tutorial/#normalize-and-visualize-phenotype-data","text":"$ cropgbm -c configfile.params -o gbm_result/ -pp --phe-plot --phefile-path phefile.txt --phefile-sep ',' --phe-column 2 --ppgroupfile-path phefile.txt --ppgroupfile-sep ',' --ppgroupid-column 3 --ppgroupfile-header --phe_norm --norm-mode z-score --phe_norm calls the phenotype data normalization function. --norm-mode Normalization algorithm, optional values [0-1, max-min, z-score]. Default is z-score: z-score The output files are phefile_groupN.phenorm, phefile_scatter.pdf: phefile_groupX.phenorm is an output file after extracting and normalizing the phenotype data of the same group of samples according to the groupID of the sample, where X is the groupID of the sample. Generate a total of N files, each file contains only the sample belonging to the groupX and its phenotype data, where N is the number of groups of samples phefile_scatter.pdf shows the distribution of normalized phenotype data in each group in the form of scatter plots and boxplots. The abscissa is the groupID, and the ordinate is the phenotype value. Each point represents a sample. (fig 4) fig 4","title":"Normalize and visualize phenotype data"},{"location":"Tutorial/#recoding-phenotype-data-multi-classification","text":"$ cropgbm -c configfile.params -o gbm_result/ -pp --phe-recode word2num --phefile-path phefile.txt --phefile-sep ',' --phe-column 2 --phe-recode Calls the phenotype data recoding function, optional values\u200b[word2num, num2word]. Word2num means re-encoding phenotype data into continuous non-negative integer form, and num2word means re-encoding continuous non-negative integer form into phenotype data (requires conversion table of integer and phenotype). When performing classification tasks, LightGBM only accepts consecutive integers with example labels [0, N). If the training sample comes from 5 groups, [0, 1, 2, 3, 4] is required as the label of the 5 groups, but this usually does not match the actual group name. Using this parameter, the program can implement a reversible conversion between sample labels and [0, N) consecutive integers. Provide compatible phenotype data for downstream classification tasks: word2num The output files are phefile.numphe, phefile.word2num: phefile.numphe is an output file that recodes phenotype data into consecutive non-negative integers. Because LightGBM requires the coding form of each category to be a continuous non-negative integer starting from 0 when predicting classification problems, the actual phenotype data is difficult to meet this requirement. The program uses the phenotype data re-encoding function to achieve the above conversion. phefile.word2num is a correspondence file between phenotype data and continuous non-negative integer encoding. _ $ cropgbm -c configfile.params -o gbm_result / -pp --phe-recode num2word -num2wordfile-path phefile.word2num --phefile-path phefile.txt --phefile-sep ',' --phe-column 2_ --num2wordfile-path Integer and phenotype corresponding to the conversion table file path. This parameter is only used when --phe-recode = num2word : phefile.word2num The output file is phefile.wordphe: phefile.wordphe is an output file that recodes consecutive non-negative integers into phenotype data Note: The re-encoding function is mainly used to transform phenotype data when predicting classification problems. Word2num is commonly used to convert the phenotype data of the training set samples into a format that can be processed by the program, and num2word is often used to convert the prediction results of the test set into the original phenotype data format.","title":"Recoding phenotype data (multi-classification)"},{"location":"Tutorial/#population-structure-analysis","text":"Analysis of population structure based on genotype data Input : genotype data Output : filename.cluster, filename_redim.pdf, filename_cluster.pdf, filename_reachability.pdf","title":"Population structure analysis"},{"location":"Tutorial/#pca-kmeans-analyze-and-visualize","text":"$ cropgbm -c configfile.params -o gbm_result/ -s --genofile-path filename_filter.geno --structure_plot --redim-mode pca --pca-explained-var 0.98 --cluster-mode kmeans --n-clusters 30 -s Calls the population structure analysis module. --genofile-path The path of the genotype data file, often the preprocessed result is used as input: filename_filter.geno --structure-plot Calls the population structure plot function. A total of 2 (3) scatter plots are displayed showing the results of dimensionality reduction and clustering. --redim-mode Dimension reduction algorithm, optional value [tsne, pca]. Default is pca: pca --pca-explained-var The parameter value is an integer greater than 1 or a decimal value between 0-1. When the parameter value is an integer, it indicates the dimension of the data after pca dimensionality reduction; when the parameter value is a decimal, it indicates the amount of variation that can be explained by the data after pca dimensionality reduction. This parameter is only used when --redim-mode = pca . Default is 0.95: 0.98 --cluster-mode Clustering algorithm, optional value [kmeans, optics]. Default is kmeans: kmeans --n-clusters The number of clusters. This parameter is only used when --cluster-mode = kmeans : 30 (Because it is known that the dataset is obtained by crossing 207 fathers with 30 mothers) Output files filename.cluster, filename_redim.pdf, filename_cluster.pdf: filename.cluster is the output file for the clustering results. The content is two columns: sampleID, groupID. Where the groupID is '-1' means this sample is not clustered. filename_redim.pdf displays the dimensionality reduction results in the form of a scatter plot. (fig 5) filename_cluster.pdf displays the clustering results in the form of a scatter plot, with different groupID indicated by different colors. (fig 6) fig 5 fig 6","title":"PCA-Kmeans analyze and visualize"},{"location":"Tutorial/#t-sne-optics-analyze-and-visualize","text":"The t-SNE and OPTICS algorithms are more suitable for data set with unknown population categories. PCA and Kmeans algorithms are recommended when the number of population groups is known. $ cropgbm -c configfile.params -o gbm_result/ -s --genofile-path filename_filter.geno --structure_plot --redim-mode tsne --window-size 50 --tsne-dim 2 --cluster-mode optics --optics-min-sample 0.025 --optics-xi 0.01 --optics-min-cluster-size 0.03 --window-size Sliding window size in dimension reduction. Since the calculation speed of the t-SNE algorithm decreases significantly with increasing dimensions, the program performs a preliminary dimensionality reduction on the data by sliding windows. When the number of snp is small, the parameters have a greater impact on the dimensionality reduction results. It is recommended to reduce the parameter value as the number of snp decreases. Default is 20. This parameter is only used when --redim-mode = tsne : 50 --tsne-dim Dimension of data after dimension reduction of t-SNE algorithm. This parameter is only used when --redim-mode = tsne . Default is 2: 2 --optics-min-samples The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the minimum number of samples required to form the core point; when the parameter value is a decimal number, it indicates the ratio of the minimum number of samples required to form the core point to the total sample number. This parameter is only used when --cluster-mode = optics . Default is 0.025: 0.05 --optics-xi Minimum value of the reachable distance gradient required for clustering. This parameter is only used when --cluster-mode = optics . Default is 0.05: 0.05. --optics-min-cluster-size The parameter value is an integer greater than 1 or a decimal between 0-1. When the parameter value is an integer, it indicates the minimum number of samples required for the aggregation. When the parameter value is a decimal number, it indicates the ratio of the minimum number of samples required for the aggregation to the total number of samples. This parameter is only used when --cluster-mode = optics . Default is 0.03: 0.06 Output files filename.cluster, filename_redim.pdf, filename_cluster.pdf, filename_reachability.pdf: filename.cluster Output file for the clustering results. The content is two columns: sampleID, groupID. A groupID of '-1' indicates that this sample is not clustered. filename_redim.pdf displays the dimensionality reduction results in the form of a scatter plot. (fig 7) filename_cluster.pdf displays the clustering results in the form of a scatter plot, with different groupIDs indicated by different colors. (fig 8) filename_reachability.pdf displays the reachable distance between each sample in the form of a scatter plot, which is only output when --redim-mode = tsne . Different categories are represented by different colors, and discrete points are represented by black. (fig 9) fig 7 fig 8 fig 9","title":"t-SNE-OPTICS analyze and visualize"},{"location":"Tutorial/#compare-the-differences-between-results-and-label","text":"$ cropgbm -c configfile.params -o gbm_result/ -s --genofile-path filename_filter.geno --structure_plot --redim-mode tsne --window-size 50 --tsne-dim 2 --cluster-mode optics --optics-min-sample 0.025 --optics-xi 0.01 --optics-min-cluster-size 0.03 --sgroupfile-path phefile.txt --sgroupfile-sep ',' --sgroupid-column 3 --sgroupfile-header --sgroupfile-path Group label data file path: phefile.txt --sgroupfile-sep Group label data file separator: ',' --sgroupfile-column The column index in the group label data file that stores group label information. This parameter is only used when the number of --sgroupfile-path file columns is greater than 2: 3 --sgroupfile-header The group label data file file contains headers. Output files filename.cluster, filename_redim.pdf, filename_cluster.pdf, filename_reachability.pdf: filename.cluster Output file for the clustering results. The content is two columns: sampleID, groupID. A groupID of '-1' indicates that this sample is not clustered. filename_redim.pdf displays the dimensionality reduction results in the form of a scatter plot. When the parameter --sgroupfile-path is assigned, the program will mark the true labels of each sample on the basis of the dimensionality reduction map, and different group are indicated by different colors. (fig 10) filename_cluster.pdf displays the clustering results in the form of a scatter plot, with different groups indicated by different colors. (fig 11) filename_reachability.pdf displays the reachable distance between each sample in the form of a scatter plot, which is only output when --redim-mode=tsne . Different groups are represented by different colors. The discrete points are represented by black. fig 10 fig 11","title":"Compare the differences between results and label"},{"location":"Tutorial/#training-model-snp-selection","text":"Training model SNP selection Input : genotype data, phenotype data Output : filename.lgb_model, filename_bygain.pdf, filename_random.pdf, filename_heatmap.pdf The program allows the user to modify some parameters in the LightGBM algorithm according to the research purpose. But because there are many parameters, this tutorial does not introduce them. For related content, please refer to: Program parameters> SNP selection and phenotype prediction > LightGBM parameter","title":"Training model SNP selection"},{"location":"Tutorial/#cross-validation","text":"During model training, if there is no validation set to help determine whether the model is overfitting, it is recommended to use -cv to determine a reasonable number of trainings. $ cropgbm -c configfile.params -o gbm_result/ -e -cv --traingeno train1.geno --trainphe train1.phe --cv-nfold 5 --min-detal 0.5 -e Call the SNP selection and phenotype prediction module. -cv Call the cross-validation function. --traingeno Training set genotype data file path. The file separator is ',', the first line is the snpID information, and the first column is the sampleID information. This parameter is used when -t or -cv is specified: train1.geno --trainphe Path to the training set sample phenotype data file. The file separator is ',', including the header, and the first column is the sampleID information. This parameter is used when -t or -cv is specified: train.phe --cv-nfold Number of folds per cross-validation. Default is 5: 5 --min-detal The minimum percentage improvement in model accuracy per training. The program returns the number of times the model is trained when the accuracy is less than this threshold and the accuracy of the model's cross-validation at this time. When objective = regression , the accuracy is the mean of the mse between the predicted result and the true value. Default is 0.5: 0.5","title":"Cross-validation"},{"location":"Tutorial/#training-model","text":"$ cropgbm -c configfile.params -o gbm_result/ -e -t --traingeno train1.geno --trainphe train1.phe --validgeno valid.geno --validphe valid.phe -t Call the training model function --validgeno Path to the validation set genotype data file. The file separator is ',', the first line is the snpID information, and the first column is the sampleID information. : Valid.geno --validphe The file path of the sampleID in the validation set. The file separator is ',', including the header, the first column is the sampleID: valid.phe _ $ cropgbm -c configfile.params -o gbm_result / -e -t --traingeno train2.geno --trainphe train2.phe --validgeno valid.geno --validphe valid.phe --init-model-path train1.lgb_model_ --init-model-path Path to the starting model file. The LightGBM algorithm will continue to train based on this model. Commonly used for batch training of big data: train1.lgb_model Output file: train1.lgb_model train1.lgb_model Model file. The tree structure of each training and the gain value of each node are recorded. Note: The program recognizes different snp by sequence, not by column name. If the snp of the same index column is different between the two data sets, the program cannot recognize it. Therefore, the training set, test set, and validation set need to be consistent in the order of snp, otherwise the prediction result is non-reference.","title":"Training model"},{"location":"Tutorial/#snp-selection","text":"$ cropgbm -c configfile.params -o gbm_result/ -e -t -sf --bygain-boxplot --traingeno train1.geno --trainphe train1.phe --gain-min 0.05 --colorbar-max 0.6 --cv-times 6 -sf Call the SNP selection function. This function is designed to be used in conjunction with the training model function ( -t ) and cannot be used alone. --bygain-boxplot Draws a boxplot that keeps changing as the SNP joins the model. This parameter is used when -sf . --gain-min calculates the total gain of each SNP in the model and uses the product of the maximum gain and --gain-min as the threshold. When the total gain of SNP in the model is less than the threshold, this SNP will not be selected. Default is 0.05: 0.05 --colorbar-max The product of the maximum gain of each SNP in each tree and --colorbar-max will be used as the maximum value of colorbar in the heat map. Default is 0.6: 0.6 --cv-times Number of repetitions for cross-validation. Default is 5: 6 Output files: train1.lgb_model, train1.feature, train1_bygain.pdf, train1_random.pdf, train1_heatmap.pdf train1.lgb_model The model file. The tree structure of each training and the gain value of each node are recorded. train1.feature The SNP gain file. The gain value of each SNP in each decision tree is recorded. train1_bygain.pdf Shows the change of model error with the addition of SNP in the form of a scatter plot. The program repeated the 5-fold cross-validation on the training set using the added SNP. The x-axis coordinate in the figure is the new snpID added in each model, which is added in order from the largest featureGain_sum value of the SNP in the train1.feature file. The y-axis coordinate is the prediction error. (fig 12) train1_random.pdf shows the change of model error with the addition of SNP in the form of boxplots. The x-axis in the figure is the number of SNP used by the model. Since the SNP used in each cross-validation is randomly extracted from all SNP, there is no snpID. The y-axis is the prediction error. (fig 13) train1_heatmap.pdf displays the gain value and change rule of each SNP in different decision tree in the form of a heatmap, that is, the information in the train1.feature file. The x-axis coordinates in the figure are the number of the SNP, and they are arranged according to the featureGain_sum value of the SNP in the train1.feature file. The y-axis coordinate is the decision tree number, and the number represents the number of times the model is trained (for example, tree20 represents the decision tree generated by the 20th training). (fig 14) fig 12 fig 13 fig 14","title":"SNP selection"},{"location":"Tutorial/#phenotype-prediction","text":"Phenotype prediction Input : genotype data, model files Output : filename.predict $ cropgbm -c configfile.params -o gbm_result/ -e -p --testgeno test.geno --modelfile-path train1.lgb_model -p Call phenotype prediction function. --testgeno Path of the test set genotype data file. The file separator is ',', the first line is the snpID information, and the first column is the sampleID information. This parameter is used when -p is specified: test.geno --modelfile-path The path of the LightGBM model file. The program uses this model to complete the phenotype prediction of the test set. This parameter is used when -p is specified: train1.lgb_model Output file filename.predict: filename.predict Output file of the prediction result.","title":"Phenotype prediction"}]}